generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  password      String
  phone         String?
  emailVerified DateTime?
  image         String?
  role          Role      @default(PATIENT)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  doctor   Doctor?
  patient  Patient?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  type       String // EMAIL_VERIFICATION, PHONE_VERIFICATION, PASSWORD_RECOVERY

  @@unique([identifier, token])
}

model Doctor {
  id           String   @id @default(cuid())
  userId       String   @unique
  specialty    String
  license      String   @unique
  phone        String
  about        String?
  experience   Int? // años de experiencia
  rating       Float? // promedio de calificaciones
  totalReviews Int? // total de reseñas
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  appointments Appointment[] @relation("DoctorAppointments")
  services     Service[]     @relation("DoctorServices")
  schedules    Schedule[]
  reviews      Review[]      @relation("DoctorReviews")
}

model Patient {
  id        String    @id @default(cuid())
  userId    String    @unique
  phone     String
  birthDate DateTime?
  gender    String?
  address   String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  appointments Appointment[] @relation("PatientAppointments")
  reviews      Review[]      @relation("PatientReviews")
}

model Service {
  id          String   @id @default(cuid())
  doctorId    String
  name        String
  description String
  price       Float
  duration    Int // en minutos
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  doctor       Doctor        @relation("DoctorServices", fields: [doctorId], references: [id], onDelete: Cascade)
  appointments Appointment[] @relation("ServiceAppointments")
}

model Appointment {
  id        String            @id @default(cuid())
  doctorId  String
  patientId String
  serviceId String
  date      DateTime
  time      String
  duration  Int // en minutos
  status    AppointmentStatus @default(PENDING)
  notes     String?
  reason    String?
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt

  doctor  Doctor  @relation("DoctorAppointments", fields: [doctorId], references: [id], onDelete: Cascade)
  patient Patient @relation("PatientAppointments", fields: [patientId], references: [id], onDelete: Cascade)
  service Service @relation("ServiceAppointments", fields: [serviceId], references: [id], onDelete: Cascade)
}

model Schedule {
  id        String   @id @default(cuid())
  doctorId  String
  dayOfWeek Int // 0 = Domingo, 1 = Lunes, etc.
  startTime String
  endTime   String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  doctor Doctor @relation(fields: [doctorId], references: [id])

  @@unique([doctorId, dayOfWeek])
}

model Review {
  id        String   @id @default(cuid())
  doctorId  String
  patientId String
  rating    Int // 1-5
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  doctor  Doctor  @relation("DoctorReviews", fields: [doctorId], references: [id])
  patient Patient @relation("PatientReviews", fields: [patientId], references: [id])

  @@unique([doctorId, patientId])
}

enum Role {
  DOCTOR
  PATIENT
  ADMIN
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELLED
  NO_SHOW
}
